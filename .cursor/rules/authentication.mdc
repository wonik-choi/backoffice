---
description: 
globs: 
alwaysApply: false
---
# Authentication System Rules

## Overview
This project uses a cookie-based session authentication system with Next.js API Routes acting as a proxy to the backend server. The authentication flow follows Feature-Sliced Design (FSD) architecture patterns.

## Core Authentication Flow

### Route Protection
- Authentication is handled at the middleware level in [middleware.ts](mdc:src/middleware.ts)
- Protected routes are defined as a hardcoded array: `['/home', '/free-trial']`
- Session validation is performed by checking the presence of the `SESSION` cookie
- Unauthenticated users are redirected to `/login`

### Page Structure
```
src/app/
├── (certification)/          # 🔒 Authentication required pages
│   ├── home/                 # Dashboard
│   ├── free-trial/           # Free trial customer management
│   └── temp-free-trial/      # Temporary free trial management
└── (non-certification)/      # 🌐 Public pages
    ├── login/                # Login page
    ├── register-free-trial/  # Registration page
    └── apply-free-trial/     # Application page
```

## Authentication Implementation Patterns

### 1. Login Flow
The login process follows this pattern:

**Frontend Form**: [LoginForm.tsx](mdc:src/views/login/ui/LoginForm.tsx)
- Uses `@tanstack/react-form` for form management
- Validates input with Zod schema from [schema.ts](mdc:src/features/authentication/config/schema.ts)
- Calls `usePostLogin` hook on form submission

**React Query Hook**: [usePostLogin.ts](mdc:src/features/authentication/services/query/usePostLogin.ts)
- Makes API call to `/api/login`
- Handles success/error callbacks
- Uses Sentry error wrapping with `wrapperSentry`

**API Route**: [route.ts](mdc:src/app/api/login/route.ts)
- Validates request body with Zod schema
- Calls authentication repository
- Extracts session cookie from backend response using [splitSession.ts](mdc:src/app/api/splitSession.ts)
- Sets HttpOnly cookie with 30-day expiration

**Repository**: [repositoryImpl.ts](mdc:src/entities/common/authentication/services/repositoryImpl.ts)
- Makes actual HTTP request to backend server
- Uses `application/x-www-form-urlencoded` format
- Returns response with headers containing session cookie

### 2. Logout Flow
**Navigation Component**: [NavigationSidebar.tsx](mdc:src/widgets/navigation/ui/NavigationSidebar.tsx)
- Contains logout button
- Uses `useNavigationContext` hook

**Context Hook**: [useNavigationContext.ts](mdc:src/widgets/navigation/services/useNavigationContext.ts)
- Wraps `usePostLogout` hook
- Handles navigation to login page on success

**API Route**: [route.ts](mdc:src/app/api/logout/route.ts)
- Calls authentication repository
- Clears session cookie by setting maxAge to 0

### 3. Route Guard Implementation
**Middleware**: [middleware.ts](mdc:src/middleware.ts)
```typescript
const session = request.cookies.get('SESSION')?.value;
const protectedRoutes = ['/home', '/free-trial'];

if (protectedRoutes.includes(pathname) && !session) {
  return NextResponse.redirect(new URL('/login', request.url));
}
```

## Cookie Session Management

### Current Session Parsing
The [splitSession.ts](mdc:src/app/api/splitSession.ts) utility extracts cookie attributes:
- Session value
- HttpOnly flag
- Secure flag  
- Path
- SameSite policy

### Cookie Configuration
```typescript
cookieStore.set('SESSION', sessionValue, {
  httpOnly: true,
  secure: process.env.NODE_ENV === 'production',
  maxAge: 60 * 60 * 24 * 30, // 30 days for login
  path: '/',
  sameSite: 'lax',
});
```

## FSD Layer Responsibilities

### 🎯 Features Layer
**Location**: `src/features/authentication/`
- **config/**: Query keys, Zod schemas
- **model/**: TypeScript interfaces
- **services/query/**: React Query hooks (`usePostLogin`, `usePostLogout`)

### 🏛️ Entities Layer  
**Location**: `src/entities/common/authentication/`
- **models/repository.ts**: Repository interface definition
- **services/repositoryImpl.ts**: Repository implementation with HTTP calls

### 🧩 Views Layer
**Location**: `src/views/login/`
- **ui/Login.tsx**: Login page layout
- **ui/LoginForm.tsx**: Login form with validation

### 🔧 Widgets Layer
**Location**: `src/widgets/navigation/`
- **ui/NavigationSidebar.tsx**: Contains logout functionality
- **services/useNavigationContext.ts**: Navigation logic including logout

### 📱 App Layer
**Location**: `src/app/api/`
- **login/route.ts**: Login API endpoint
- **logout/route.ts**: Logout API endpoint
- **splitSession.ts**: Cookie parsing utility

## Development Patterns

### When Adding New Authentication Features

1. **Schema Definition**: Define Zod schemas in `features/authentication/config/schema.ts`
2. **Query Keys**: Add React Query keys in `features/authentication/config/query-keys.ts`
3. **Repository Interface**: Update interface in `entities/common/authentication/models/repository.ts`
4. **Repository Implementation**: Implement in `entities/common/authentication/services/repositoryImpl.ts`
5. **React Query Hook**: Create hook in `features/authentication/services/query/`
6. **API Route**: Create Next.js API route in `app/api/`
7. **UI Components**: Add components in appropriate view or widget layer

### Cookie Session Best Practices

1. **Always use HttpOnly**: Prevents XSS attacks
2. **Set Secure in production**: Ensures HTTPS-only transmission
3. **Use SameSite**: Prevents CSRF attacks
4. **Set appropriate expiration**: Balance security vs user experience
5. **Clear on logout**: Set maxAge to 0 or delete cookie

### Error Handling

1. **Use Sentry**: Wrap async operations with `wrapperSentry`
2. **Consistent error responses**: Use standardized error objects
3. **User-friendly messages**: Show appropriate error messages in UI
4. **Graceful degradation**: Handle network failures gracefully

## Security Considerations

### Current Implementation
- ✅ HttpOnly cookies prevent XSS
- ✅ SameSite prevents CSRF
- ✅ Secure flag in production
- ✅ Path restriction
- ✅ Request validation with Zod

### Areas for Improvement
- ⚠️ No session validation in middleware (only checks presence)
- ⚠️ No CSRF token implementation
- ⚠️ No session timeout handling
- ⚠️ No concurrent session management

## Troubleshooting

### Common Issues
1. **Cookie domain mismatch**: Ensure all requests go through Next.js proxy
2. **CORS issues**: Use Next.js API routes as proxy to avoid cross-origin requests  
3. **Session not persisting**: Check cookie settings and browser dev tools
4. **Redirect loops**: Verify protected routes configuration in middleware

### Debug Steps
1. Check browser dev tools > Application > Cookies
2. Verify API responses include Set-Cookie headers
3. Confirm middleware is running with console logs
4. Test with curl to verify backend responses
